package vo;

import graph.IGraph;
import soot.JarAna;
import utiil.SootUtil;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class DependencyRisk {
    private final DependencyJar dependencyJar;
    private final Set<VulnerableMethod> vulnerableMethodSet;
    private Set<MethodVO> methodVOSet;
    private final String cveId;
    private IGraph graph;

    public DependencyRisk(DependencyJar dependencyJar, Set<VulnerableMethod> vulnerableMethodSet, String cveId) {
        this.dependencyJar = dependencyJar;
        this.vulnerableMethodSet = vulnerableMethodSet;
        this.cveId = cveId;
        initAllMethodVO();
    }

    //<org.apache.logging.log4j.core.impl.DefaultLogEventFactory: org.apache.logging.log4j.core.LogEvent createEvent(java.lang.String,
    //org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,
    //java.util.List,java.lang.Throwable)>
    public void initAllMethodVO() {
        methodVOSet = new HashSet<>();
//        Set<String> methods = dependencyJar.getAllMethods();
//
//        for (String methodName : methods) {
//            System.out.println(methodName);
//        }
        Map<String, ClassVO> classVOMap = dependencyJar.getAllClass();
//        System.out.println(classVOMap.keySet());
        for (VulnerableMethod vulnerableMethod : vulnerableMethodSet) {
            String methodName = vulnerableMethod.getMethodName();
            String[] strings = methodName.split("\\.");
            String className = methodName.replace("." + strings[strings.length - 1], "");
            if (classVOMap.containsKey(className)) {
                ClassVO classVO = classVOMap.get(className);
                for (MethodVO methodVO : classVO.getMethods()) {
                    System.out.println(methodVO.getMthdSig());
                    System.out.println(SootUtil.methodSigToName(methodVO.getMthdSig()));
                }
            }
        }
    }

    @Override
    public String toString() {
        return "DependencyRisk{" +
                "dependencyJar=" + dependencyJar +
                ", vulnerableMethodSet=" + vulnerableMethodSet +
                ", cveId='" + cveId + '\'' +
                ", graph=" + graph +
                '}';
    }
}
