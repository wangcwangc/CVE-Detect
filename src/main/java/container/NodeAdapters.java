package container;

import org.apache.maven.shared.dependency.tree.DependencyNode;
import utiil.MavenUtil;
import utiil.NodeAdapterCollector;
import vo.DependencyJar;
import vo.ManageNodeAdapter;
import vo.NodeAdapter;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;


public class NodeAdapters {
    private static NodeAdapters instance;

    public static NodeAdapters i() {
        return instance;
    }

    public static void init(DependencyNode root) {
        instance = new NodeAdapters();
        // add node in dependency tree
        NodeAdapterCollector visitor = new NodeAdapterCollector(instance);
        root.accept(visitor);
        // add management node
        List<NodeAdapter> managementNodeList = new ArrayList<>();
        for (NodeAdapter nodeAdapter : instance.container) {
            if (nodeAdapter.isVersionChanged()) {// this node have management
                if (null == instance.getNodeAdapter(nodeAdapter)) {
                    // this managed-version does not have used node,we should new a virtual node to
                    NodeAdapter managementNode = null;
                    for (NodeAdapter existManagementNode : managementNodeList) {// find if manageNd exists
                        if (existManagementNode.isSelf(nodeAdapter)) {
                            managementNode = existManagementNode;
                            break;
                        }
                    }
                    if (null == managementNode) {// do not exist manageNd,should new and add
                        managementNode = new ManageNodeAdapter(nodeAdapter);
                        managementNodeList.add(managementNode);
                    }
                }
            }
        }
        for (NodeAdapter managementNode : managementNodeList) {
            instance.addNodeAdapter(managementNode);
        }
    }

    private final List<NodeAdapter> container;

    private NodeAdapters() {
        container = new ArrayList<>();
    }

    public void addNodeAdapter(NodeAdapter nodeAdapter) {
        container.add(nodeAdapter);
    }

    /**
     * 根据node获得对应的adapter
     *
     * @param node dependency node
     */
    public NodeAdapter getNodeAdapter(DependencyNode node) {
        for (NodeAdapter nodeAdapter : container) {
            if (nodeAdapter.isSelf(node))
                return nodeAdapter;
        }
        MavenUtil.i().getLog().warn("cant find nodeAdapter for node:" + node.toNodeString());
        return null;
    }

    public NodeAdapter getNodeAdapter(NodeAdapter entryNodeAdapter) {
        for (NodeAdapter nodeAdapter : container) {
            if (nodeAdapter.isSelf(entryNodeAdapter))
                return nodeAdapter;
        }
        MavenUtil.i().getLog().warn("can not find nodeAdapter for management node:" + entryNodeAdapter.toString());
        return null;
    }

    /**
     * 得到使用depJar的所有NodeAdapters
     *
     * @param dependencyJar Dependency Jar
     * @return all nodeAdapters
     */
    public Set<NodeAdapter> getNodeAdapters(DependencyJar dependencyJar) {
        Set<NodeAdapter> result = new HashSet<>();
        for (NodeAdapter nodeAdapter : container) {
            if (nodeAdapter.getDepJar() == dependencyJar) {
                result.add(nodeAdapter);
            }
        }
        if (result.size() == 0)
            MavenUtil.i().getLog().warn("can not find nodeAdapter for depJar:" + dependencyJar.toString());
        return result;
    }

    public List<NodeAdapter> getAllNodeAdapter() {
        return container;
    }

}
