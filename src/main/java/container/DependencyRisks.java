package container;

import data.dao.VulnerableDao;
import data.dao.VulnerablePackageDao;
import data.po.Vulnerable;
import data.po.VulnerablePackage;
import utiil.DetectUtil;
import utiil.MybatisUtil;
import vo.DependencyJar;
import vo.DependencyRisk;
import vo.VulnerableMethod;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class DependencyRisks {
    private static DependencyRisks instance; // 实例

    public static DependencyRisks i() {
        return instance;
    }

    public static void init(DependencyJars dependencyJars) {
        if (instance == null) {
            instance = new DependencyRisks(dependencyJars);
        }
    }

    private DependencyRisks(DependencyJars dependencyJars) {
        container = new HashSet<>();
        Set<DependencyJar> usedDependencyJarSet = dependencyJars.getUsedDependencyJars();
        Set<VulnerablePackage> vulnerablePackageSet = getAllVulnerablePackage();
        for (DependencyJar dependencyJar : usedDependencyJarSet) {
            if (vulnerablePackageSet.contains(new VulnerablePackage(dependencyJar.getGroupId(), dependencyJar.getArtifactId()))) {
                List<Vulnerable> vulnerableList = getAllVulnerableByPackage(dependencyJar.getGroupId(), dependencyJar.getArtifactId());
                for (Vulnerable vulnerable : vulnerableList) {
                    Set<VulnerableMethod> vulnerableMethodSet = new HashSet<>();
                    if (DetectUtil.isInVersionRange(dependencyJar.getVersion(), vulnerable.getAffectedVersion())) {
                        VulnerableMethod vulnerableMethod = new VulnerableMethod(vulnerable.getMethodLongName(), vulnerable.getParams());
                        vulnerableMethodSet.add(vulnerableMethod);
                    }
                    container.add(new DependencyRisk(dependencyJar, vulnerableMethodSet, vulnerable.getCveId()));
                }
            }
        }
    }

    private final Set<DependencyRisk> container;

    public Set<DependencyRisk> getAllDependencyRisks() {
        return container;
    }

    private Set<VulnerablePackage> getAllVulnerablePackage() {
        VulnerablePackageDao vulnerablePackageDao = MybatisUtil.createSqlSession().getMapper(VulnerablePackageDao.class);
        return vulnerablePackageDao.selectAllDistinctVulnerablePackage();
    }

    private List<Vulnerable> getAllVulnerableByPackage(String groupId, String artifactId) {
        VulnerableDao vulnerableDao = MybatisUtil.createSqlSession().getMapper(VulnerableDao.class);
        return vulnerableDao.selectAllVulnerableByPackage(groupId, artifactId);
    }
}
