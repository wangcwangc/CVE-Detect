package container;

import utiil.MavenUtil;
import vo.DependencyJar;
import vo.NodeAdapter;

import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class DependencyJars {
    private static DependencyJars instance; // 实例

    public static DependencyJars i() {
        return instance;
    }

    public static void init(NodeAdapters nodeAdapters)  {
        if (instance == null) {
            instance = new DependencyJars(nodeAdapters);
        }
    }

    private final Set<DependencyJar> container;
    private DependencyJar hostDepJar;

    private DependencyJars(NodeAdapters nodeAdapters)  {
        container = new HashSet<>();
        for (NodeAdapter nodeAdapter : nodeAdapters.getAllNodeAdapter()) {
            container.add(new DependencyJar(nodeAdapter.getGroupId(), nodeAdapter.getArtifactId(), nodeAdapter.getVersion(),
                    nodeAdapter.getClassifier(), nodeAdapter.getFilePath()));
        }

    }

    /**
     * 得到正在使用的DepJar，即得到被Maven环境选择的
     *
     * @return set of dependency jar
     */
    public Set<DependencyJar> getUsedDepJars() {
        Set<DependencyJar> usedDepJars = new HashSet<>();
        for (DependencyJar depJar : container) {
            if (depJar.isSelected()) {
                usedDepJars.add(depJar);
            }
        }
        return usedDepJars;
    }

    /**
     * 得到根DepJar
     * @return dependency jar
     */
    public DependencyJar getHostDepJar() {
        if (hostDepJar == null) {
            for (DependencyJar depJar : container) {
                if (depJar.isHost()) {
                    if (hostDepJar != null) {
                        MavenUtil.i().getLog().warn("multiple depjar for host ");	//提示信息多个host depJar
                    }
                    hostDepJar = depJar;
                }
            }
            MavenUtil.i().getLog().info("depjar host is " + hostDepJar.toString()); // 测试输出
        }
        return hostDepJar;
    }

    public DependencyJar getDep(String groupId, String artifactId, String version, String classifier) {
        for (DependencyJar dep : container) {
            if (dep.isSame(groupId, artifactId, version, classifier)) {
                return dep;
            }
        }
        MavenUtil.i().getLog().warn("cant find dep:" + groupId + ":" + artifactId + ":" + version + ":" + classifier);
        return null;
    }

    public Set<DependencyJar> getAllDepJar() {
        return container;
    }

    public DependencyJar getDep(NodeAdapter nodeAdapter) {
        return getDep(nodeAdapter.getGroupId(), nodeAdapter.getArtifactId(), nodeAdapter.getVersion(),
                nodeAdapter.getClassifier());
    }

    /**
     * 此函数存在多态
     *
     * @return list of used jar
     */
    public List<String> getUsedJarPaths() {
        List<String> usedJarPaths = new ArrayList<>();
        for (DependencyJar depJar : DependencyJars.i().getAllDepJar()) {
            if (depJar.isSelected()) {
                usedJarPaths.addAll(depJar.getJarFilePaths(true));
            }
        }
        return usedJarPaths;
    }


    /**
     * @return path1;path2;path3
     */
    public String getUsedJarPathsStr() {
        StringBuilder sb = new StringBuilder();
        for (String path : getUsedJarPaths()) {
            sb.append(path).append(File.pathSeparator);
        }
        String paths = sb.toString();
        paths = paths.substring(0, paths.length() - 1);// delete last ;
        return paths;
    }

    /**
     * 得到输入Class的DepJar
     * 此DepJar为项目使用的
     * @param cls class
     * @return usedDepJar that has class.
     */
    public DependencyJar getClassJar(String cls) {
        for (DependencyJar depJar : DependencyJars.i().getAllDepJar()) {
            if (depJar.isSelected()) {
                if (depJar.containClass(cls))
                    return depJar;
            }
        }
        return null;
    }

}
