package container;


import vo.DependencyJar;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

/**
 * 当前项目中所有class sig
 */
public class AllClasses {
    private static AllClasses instance; //实例
    private final Set<String> classes;

    public static void init(DependencyJars dependencyJars) {
        if (instance == null) {
            instance = new AllClasses(dependencyJars);
        }
    }

    public static AllClasses i() {
        return instance;
    }

    //构造函数
    private AllClasses(DependencyJars dependencyJars) {
        classes = new HashSet<>();
        for (DependencyJar dependencyJar : dependencyJars.getAllDepJar()) {
            if (dependencyJar.isSelected()) {
                //得到depJar中所有的类
                classes.addAll(dependencyJar.getAllCls(true));
            }
        }
    }

    public Set<String> getAllCls() {
        return classes;
    }

    //classes是否包含class
    public boolean contains(String cls) {
        return classes.contains(cls);
    }

    //得到不在本类集合中的类
    public Set<String> getNotInClasses(Collection<String> testSet) {
        Set<String> notInClasses = new HashSet<>();
        for (String cls : testSet) {
            if (!this.contains(cls)) {
                notInClasses.add(cls);
            }
        }
        return notInClasses;
    }
}
