package detect;

import container.DependencyJars;
import container.DependencyRisks;
import graph.*;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import risk.DependencyRisk;
import utiil.Conf;
import utiil.SootUtil;
import vo.DependencyJar;

import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

//mvn -f=pom.xml -DignoreTestScope=true -Dmaven.test.skip=true xmu:CVE-Detect:1.0:detectCVE -e
@Mojo(name = "detectCVE", defaultPhase = LifecyclePhase.VALIDATE)
public class DetectCVEMojo extends DetectMojo {

    @Override
    public void run() {
        for (DependencyRisk dependencyRisk : DependencyRisks.i().getAllDependencyRisks()) {
//            System.out.println(dependencyRisk);
            PathGraph pathGraph = dependencyRisk.getPathGraph();
            Set<String> hostNodes = pathGraph.getHostNodes();
            Map<String, IBook> pathBooks = new Dog(pathGraph).findRlt(hostNodes, Conf.DOG_DEP_FOR_PATH,
                    Dog.Strategy.NOT_RESET_BOOK);
            TreeMap<Integer, PathRecord> recordDistance = new TreeMap<>();
            for (String topMethod : pathBooks.keySet()) {
                if (hostNodes.contains(topMethod)) {
                    PathBook book = (PathBook) (pathBooks.get(topMethod));
                    for (IRecord iRecord : book.getRecords()) {
                        PathRecord record = (PathRecord) iRecord;
                        recordDistance.put(record.getPathLength(), record);
                    }
                }
            }
            if (recordDistance.size() > 0) {
                System.out.println("cve id : " + dependencyRisk.getCveId());
                System.out.println("dependency jar : " + dependencyRisk.getDependencyJar());
                for (PathRecord pathRecord : recordDistance.values()) {
                    System.out.println("risk method : " + pathRecord.getRiskMethod());
                    System.out.println("path length : " + pathRecord.getPathLength());
                    System.out.println("Invocation path : " + "\n" + addJarPath(pathRecord.getPathStr(), pathGraph.getCallLineNumberMap()));
                }
            }
        }
    }

    private String addJarPath(String mthdCallPath, Map<String, Set<Integer>> callLineNumbers) {
        StringBuilder sb = new StringBuilder();
        String[] mthds = mthdCallPath.split("\\n");
        for (int i = 0; i < mthds.length - 1; i++) {
            String mthd = mthds[i];
            String cls = SootUtil.mthdSig2cls(mthd);
            DependencyJar depJar = DependencyJars.i().getClassJar(cls);
            String jarPath = "";
            if (depJar != null)
                jarPath = depJar.getJarFilePaths(true).get(0);
            sb.append(mthd).append(" ").append(callLineNumbers.get(mthd + mthds[i + 1])).append(" ").append(jarPath).append("\n");
        }
        sb.append(mthds[mthds.length - 1]);
        return sb.toString();
    }
}