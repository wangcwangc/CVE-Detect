package detect;

import data.dao.MavenDependencyDao;
import data.dao.VulnerableDao;
import data.po.MavenDependency;
import data.po.Vulnerable;
import org.apache.ibatis.session.SqlSession;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.shared.dependency.tree.DependencyNode;
import utiil.DetectUtil;
import utiil.MavenUtil;
import utiil.MybatisUtil;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

//mvn -f=pom.xml -DignoreTestScope=true -Dmaven.test.skip=true xmu:CVE-Detect:1.0:detectCVE -e
@Mojo(name = "detectCVE", defaultPhase = LifecyclePhase.VALIDATE)
public class DetectCVEMojo extends DetectMojo {

    @Override
    public void run() {
        Set<MavenDependency> vulnerablePackageSet = getAllMavenDependencyName();
        MavenUtil.i().getLog().info("get sql data");
        for (MavenDependency mavenDependency : vulnerablePackageSet) {
            System.out.println(mavenDependency.toString());
        }
        getTargetAllDependency();
        MavenUtil.i().getLog().info("current data");
        for (MavenDependency mavenDependency : targetAllDependency) {
//            System.out.println(mavenDependency.toString());
            if (vulnerablePackageSet.contains(mavenDependency)) {
                List<Vulnerable> vulnerableList = getAllVulnerableByPackage(mavenDependency.getGroupId(), mavenDependency.getArtifactId());
                for (Vulnerable vulnerable : vulnerableList) {
//                    if (DetectUtil.isInVersionRange(mavenDependency.getVersion()))
                }
            }
        }


    }

    private final Set<MavenDependency> targetAllDependency = new HashSet<>();

    private void getTargetAllDependency() {
        for (DependencyNode dependencyNode : root.getChildren()) {
            MavenDependency mavenDependency = new MavenDependency(dependencyNode.getArtifact().getGroupId(),
                    dependencyNode.getArtifact().getArtifactId(), dependencyNode.getArtifact().getVersion());
            targetAllDependency.add(mavenDependency);
            visitChildDependency(dependencyNode);
        }
    }

    private void visitChildDependency(DependencyNode node) {
        for (DependencyNode dependencyNode : node.getChildren()) {
            MavenDependency mavenDependency = new MavenDependency(dependencyNode.getArtifact().getGroupId(),
                    dependencyNode.getArtifact().getArtifactId(), dependencyNode.getArtifact().getVersion());
            targetAllDependency.add(mavenDependency);
            visitChildDependency(dependencyNode);
        }
    }

    private Set<MavenDependency> getAllMavenDependencyName() {
        MavenDependencyDao mavenDependencyDao = MybatisUtil.createSqlSession().getMapper(MavenDependencyDao.class);
        return mavenDependencyDao.selectAllDistinctMavenDependency();
    }

    private List<Vulnerable> getAllVulnerableByPackage(String groupId, String artifactId) {
        VulnerableDao vulnerableDao = MybatisUtil.createSqlSession().getMapper(VulnerableDao.class);
        return vulnerableDao.selectAllVulnerableByPackage(groupId, artifactId);
    }
}