package detect;

import container.DependencyJars;
import data.dao.VulnerablePackageDao;
import data.dao.VulnerableDao;
import data.po.VulnerablePackage;
import data.po.Vulnerable;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.shared.dependency.tree.DependencyNode;
import utiil.DetectUtil;
import utiil.MavenUtil;
import utiil.MybatisUtil;
import vo.DependencyJar;
import vo.VulnerableMethod;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

//mvn -f=pom.xml -DignoreTestScope=true -Dmaven.test.skip=true xmu:CVE-Detect:1.0:detectCVE -e
@Mojo(name = "detectCVE", defaultPhase = LifecyclePhase.VALIDATE)
public class DetectCVEMojo extends DetectMojo {

    @Override
    public void run() {
        Set<VulnerablePackage> vulnerablePackageSet = getAllVulnerablePackage();
        MavenUtil.i().getLog().info("get sql data");
        Set<DependencyJar> usedDependencyJars = DependencyJars.i().getUsedDependencyJars();
        MavenUtil.i().getLog().info("current data");
        List<DependencyJar> dependencyJarList  = new ArrayList<>();
        for (DependencyJar dependencyJar : usedDependencyJars) {
            if (vulnerablePackageSet.contains(new VulnerablePackage(dependencyJar.getGroupId(), dependencyJar.getArtifactId()))) {

//                List<Vulnerable> vulnerableList = getAllVulnerableByPackage(vulnerablePackage.getGroupId(), vulnerablePackage.getArtifactId());
//                //根据包的范围获取所有的vulnerable apis
//                List<VulnerableMethod> vulnerableMethodList = new ArrayList<>();
//                for (Vulnerable vulnerable : vulnerableList) {
//                    if (DetectUtil.isInVersionRange(vulnerablePackage.getVersion(), vulnerable.getAffectedVersion())) {
//                        VulnerableMethod vulnerableMethod = new VulnerableMethod(vulnerable.getMethodLongName(), vulnerable.getParams());
//                        vulnerableMethodList.add(vulnerableMethod);
//                    }
//                }
//                if (vulnerableMethodList.size() > 0) {
//
//                }
            }
        }


    }

    private Set<VulnerablePackage> getAllVulnerablePackage() {
        VulnerablePackageDao vulnerablePackageDao = MybatisUtil.createSqlSession().getMapper(VulnerablePackageDao.class);
        return vulnerablePackageDao.selectAllDistinctVulnerablePackage();
    }

    private List<Vulnerable> getAllVulnerableByPackage(String groupId, String artifactId) {
        VulnerableDao vulnerableDao = MybatisUtil.createSqlSession().getMapper(VulnerableDao.class);
        return vulnerableDao.selectAllVulnerableByPackage(groupId, artifactId);
    }
}