package detect;

import container.DependencyJars;
import container.DependencyRisks;
import graph.*;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import risk.DependencyRisk;
import utiil.Conf;
import utiil.MavenUtil;
import utiil.SootUtil;
import vo.DependencyJar;

import java.io.*;
import java.nio.file.Files;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

//mvn -f=pom.xml -DignoreTestScope=true -Dmaven.test.skip=true xmu:CVE-Detect:1.0:detectCVE -e
@Mojo(name = "detectCVE", defaultPhase = LifecyclePhase.VALIDATE)
public class DetectCVEMojo extends DetectMojo {

    @Override
    public void run() {
        for (DependencyRisk dependencyRisk : DependencyRisks.i().getAllDependencyRisks()) {
//            System.out.println(dependencyRisk);
            PathGraph pathGraph = dependencyRisk.getPathGraph();
            Set<String> hostNodes = pathGraph.getHostNodes();
            Map<String, IBook> pathBooks = new Dog(pathGraph).findRlt(hostNodes, Conf.DOG_DEP_FOR_PATH,
                    Dog.Strategy.NOT_RESET_BOOK);
            TreeMap<Integer, PathRecord> recordDistance = new TreeMap<>();
            for (String topMethod : pathBooks.keySet()) {
                if (hostNodes.contains(topMethod)) {
                    PathBook book = (PathBook) (pathBooks.get(topMethod));
                    for (IRecord iRecord : book.getRecords()) {
                        PathRecord record = (PathRecord) iRecord;
                        recordDistance.put(record.getPathLength(), record);
                    }
                }
            }
            if (recordDistance.size() > 0) {
                createResultPath(Conf.outDir);
                PrintWriter printer = null;
                try {
                    String fileName = MavenUtil.i().getProjectGroupId() + ":" + MavenUtil.i().getProjectArtifactId() + ":"
                            + MavenUtil.i().getProjectVersion() + "_" + dependencyRisk.getCveId();
                    printer = new PrintWriter(new BufferedWriter(
                            new FileWriter(Conf.outDir + fileName.replace('.', '_').replace(':', '_') + ".txt", true)));
                    printer.println("cve id : " + dependencyRisk.getCveId());
                    printer.println("dependency jar : " + dependencyRisk.getDependencyJar());
                    printer.println("\n");
                    for (PathRecord pathRecord : recordDistance.values()) {
                        printer.println("risk method : " + pathRecord.getRiskMethod());
                        printer.println("path length : " + pathRecord.getPathLength());
                        printer.println("CVE Bug Invocation Path : " + "\n" + addJarPath(pathRecord.getPathStr(), pathGraph.getCallLineNumberMap()));
                        printer.println("\n");
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                } finally {
                    printer.close();
                }
            }
        }
    }

    private void createResultPath(String path) {
        if (!Files.exists(new File(path).toPath())) {
            try {
                Files.createDirectory(new File(path).toPath());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }

    private String addJarPath(String mthdCallPath, Map<String, Set<Integer>> callLineNumbers) {
        StringBuilder sb = new StringBuilder();
        String[] methods = mthdCallPath.split("\\n");
        sb.append(methods[methods.length - 1]);
        for (int i = methods.length - 2; i >= 0; i--) {
            String method = methods[i + 1];
            String callMethod = methods[i];
            String callClass = SootUtil.mthdSig2cls(callMethod);
            DependencyJar depJar = DependencyJars.i().getClassJar(callClass);
            String jarPath = "";
            if (depJar != null)
                jarPath = depJar.getJarFilePaths(true).get(0);
            sb.append("\n").append("at ").append(callMethod).append(" (").append(callClass).append(".java").append(":")
                    .append(callLineNumbers.get(callMethod + method)).append(") in ").append(jarPath);
        }
        return sb.toString();
    }
}