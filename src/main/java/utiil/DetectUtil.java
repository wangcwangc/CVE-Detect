package utiil;

import java.util.regex.Pattern;

public class DetectUtil {

    public static boolean isInVersionRange(String target, String affectRange) {
        String[] ranges = affectRange.split(",");
        for (int i = 0; i < ranges.length; i = i + 2) {
            String left = ranges[i].replace(" ", "").replace("[", "");
            String right = ranges[i + 1].replace(" ", "").replace(")", "");
            if (right.contains("]")) right = right.replace("]", ".1");
            if (isInVersionRange(target, left, right)) return true;
        }
        return false;
    }

    private static boolean isInVersionRange(String target, String left, String right) {
        if (target.equals(left)) return true;
        if (target.equals(right)) return false;
        return compareLeft(target, left) && compareRight(target, right);
    }

    /**
     * @param target target version
     * @param left   left version
     * @return true : in range  false : not in range
     */
    private static boolean compareLeft(String target, String left) {
        if (left.equals("")) return true;
        String[] targets = target.split("\\.");
        String[] lefts = left.split("\\.");
        int index = 0;
        int max = Math.max(targets.length, lefts.length);
        while (index < max) {
            int targetNum;
            int leftNum;
            if (index < targets.length && index < lefts.length) {
                targetNum = translateVersionStringToInt(targets[index]);
                leftNum = translateVersionStringToInt(lefts[index]);
                if (targetNum > leftNum) return true;
                if (targetNum < leftNum) return false;
                index++;
                continue;
            }
            return index < targets.length;
        }
        return true;
    }


    /**
     * @param target target version
     * @param right  right version
     * @return true : in range  false : not in range
     */
    private static boolean compareRight(String target, String right) {
        if (right.equals("")) return true;
        String[] targets = target.split("\\.");
        String[] rights = right.split("\\.");
        int index = 0;
        int max = Math.max(targets.length, rights.length);
        while (index < max) {
            int targetNum;
            int rightNum;
            if (index < targets.length && index < rights.length) {
                targetNum = translateVersionStringToInt(targets[index]);
                rightNum = translateVersionStringToInt(rights[index]);
                if (targetNum > rightNum) return false;
                if (targetNum < rightNum) return true;
                index++;
                continue;
            }
            return index >= targets.length;
        }
        return false;
    }

    private static int translateVersionStringToInt(String version) {
        version = version.toLowerCase();
        int result = 0;
        if (isInteger(version)) {
            result = Integer.parseInt(version);
        } else {
            char start = version.charAt(0);
            switch (start) {
                case 'f':
                    result = 10000;
                    break;
                case 'r':
                    result = 100;
                    break;
                case 's':
                    result = 0;
                    break;
                case 'b':
                    result = -2;
                    break;
                default:
                    try {
                        version = version.replaceAll("[^0-9]", "");
                        result = Integer.parseInt(version);
                    } catch (Exception e) {
                        MavenUtil.i().getLog().warn(e.getMessage());
                    }
            }
        }
        return result;
    }

    private static boolean isInteger(String str) {
        Pattern pattern = Pattern.compile("^[-+]?[\\d]*$");
        return pattern.matcher(str).matches();
    }
}
