package graph;

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class PathNode implements INode {

    private String name;
    private boolean isHost;
    private boolean isRisk;
    private Set<String> outs;

    public PathNode(String name, boolean isHost, boolean isRisk) {
        this.name = name;
        this.isHost = isHost;
        this.isRisk = isRisk;
        outs = new HashSet<>();
    }

    @Override
    public String getName() {
        return name;
    }

    /**
     * 当dog走到这个节点是，得到下一个dog应该走的节点
     *
     * @return
     */
    @Override
    public Collection<String> getNext() {
        return outs;
    }

    public void addOutNode(String tgt) {
        outs.add(tgt);
    }

    @Override
    public IBook getBook() {
        return new PathBook(this);
    }

    public boolean isRisk() {
        return isRisk;
    }

    public boolean isHostNode() {
        return isHost;
    }

    /**
     * 如果这个节点是结束节点，节点应该生成一条新的记录。否则节点应该改变终止节点的副本
     * 被afterAddAllChildren调用
     *
     * @return
     */
    @Override
    public IRecord formNewRecord() {
        return new PathRecord(this.name, this.name, 1);
    }
}
