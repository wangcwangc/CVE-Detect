package graph;

import vo.MethodCall;

import java.util.*;

public class PathGraph implements IGraph {

    Map<String, PathNode> nodeNameMap;

    public PathGraph(Map<String, PathNode> nodeNameMap, List<MethodCall> calls) {
        this.nodeNameMap = nodeNameMap;
        for (MethodCall call : calls) {
            addEdge(call);
        }
    }

    private void addEdge(MethodCall call) {
        nodeNameMap.get(call.getSrc()).addOutNode(call.getTgt());
    }


    public Set<String> getHostNodes() {
        Set<String> hostNds = new HashSet<>();
        for (PathNode node : nodeNameMap.values()) {
            if (node.isHostNode())
                hostNds.add(node.getName());
        }
        return hostNds;
    }

    @Override
    public INode getNode(String nodeName) {
        return nodeNameMap.get(nodeName);
    }


    public Map<String, PathNode> getName2Node() {
        return nodeNameMap;
    }

    @Override
    public Collection<String> getAllNode() {
        return nodeNameMap.keySet();
    }
}
