package graph;

import utiil.Conf;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

public class PathBook extends IBook {

    public PathBook(INode node) {
        super(node);
        this.records = new ArrayList<>();
        this.visitedFathers = new HashSet<>();
    }

    Set<String> visitedFathers;


    /**
     * 当dog返回时，把信息记录到book中
     */
    @Override
    public void afterAddAllChildren() {
        if (getNode().isRisk()) {
            this.records.add(getNode().formNewRecord());
        }
    }

    private PathNode getNode() {
        return (PathNode) this.node;
    }

    /**
     * 加入子book的路径给自己
     *
     * @param doneChildBook
     */
    @Override
    public void addChild(IBook doneChildBook) {
        for (IRecord iRecord : doneChildBook.getRecords()) {
            PathRecord record = (PathRecord) iRecord;
            addRecord(record.getRiskMethod(), this.getNodeName() + "\n" + record.getPathStr(), record.getPathLength() + 1);
        }
    }

    private void addRecord(String riskMthd, String pathStr, int length) {
        if (Conf.findAllpath) {
            this.records.add(new PathRecord(riskMthd, pathStr, length));
        } else {//find shortest path
            for (IRecord iRecord : this.records) {
                PathRecord record = (PathRecord) iRecord;
                if (riskMthd.equals(record.getRiskMethod())) {
                    if (length < record.getPathLength()) {
                        record.setPathStr(pathStr);
                        record.setPathLength(length);
                    }
                    return;
                }
            }
            this.records.add(new PathRecord(riskMthd, pathStr, length));
        }
    }
}
