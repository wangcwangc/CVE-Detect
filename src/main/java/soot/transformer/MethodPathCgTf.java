package soot.transformer;

import graph.PathGraph;
import graph.PathNode;
import soot.Scene;
import soot.jimple.toolkits.callgraph.CallGraph;
import soot.jimple.toolkits.callgraph.Edge;
import utiil.MavenUtil;
import vo.MethodCall;

import java.util.*;

public class MethodPathCgTf extends CallGraphTransformer {

    private final Set<String> riskMethods;

    public MethodPathCgTf(Set<String> riskMethods) {
        this.riskMethods = riskMethods;
    }

    @Override
    protected void initMethodBranch() {

    }

    @Override
    protected void formGraph() {
        if (graph == null) {
            MavenUtil.i().getLog().info("start form graph...");
            Map<String, PathNode> pathNodeHashMap = new HashMap<>();
            List<MethodCall> methodCalls = new ArrayList<>();
            CallGraph cg = Scene.v().getCallGraph();
            Iterator<Edge> ite = cg.iterator();
            while (ite.hasNext()) {
                Edge edge = ite.next();

                String srcMethodName = edge.src().getSignature();
                String tgtMethodName = edge.tgt().getSignature();
                String srcClsName = edge.src().getDeclaringClass().getName();
                String tgtClsName = edge.tgt().getDeclaringClass().getName();
                if (!edge.src().isJavaLibraryMethod() && !edge.tgt().isJavaLibraryMethod()) {

                    if (!pathNodeHashMap.containsKey(srcMethodName)) {
                        pathNodeHashMap.put(srcMethodName, new PathNode(srcMethodName, isHostClass(srcClsName) && !edge.src().isPrivate(),
                                riskMethods.contains(srcMethodName)));
                    }
                    if (!pathNodeHashMap.containsKey(tgtMethodName)) {
                        pathNodeHashMap.put(tgtMethodName, new PathNode(tgtMethodName, isHostClass(tgtClsName) && !edge.tgt().isPrivate(),
                                riskMethods.contains(tgtMethodName)));
                    }
                    methodCalls.add(new MethodCall(srcMethodName, tgtMethodName));
                }
            }
            graph = new PathGraph(pathNodeHashMap, methodCalls);
            MavenUtil.i().getLog().info("end form graph.");
        }
    }
}
