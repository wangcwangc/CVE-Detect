package soot.transformer;

import container.DependencyJars;
import graph.IGraph;
import soot.SceneTransformer;
import soot.jimple.toolkits.callgraph.CHATransformer;
import utiil.MavenUtil;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public abstract class CallGraphTransformer extends SceneTransformer {
    protected IGraph graph;
    protected Set<String> entryClses;

    public CallGraphTransformer() {
        super();
        entryClses = DependencyJars.i().getHostDepJar().getAllCls(true);
    }

    @Override
    protected void internalTransform(String s, Map<String, String> map) {
        MavenUtil.i().getLog().info("call graph transformer start..");
        Map<String, String> cgMap = new HashMap<>();

        cgMap.put("enabled", "true");
        cgMap.put("apponly", "true");
        cgMap.put("all-reachable", "true");

        cgMap.put("use-original-names", "true");

        initMethodBranch();

        CHATransformer.v().transform("wjtp", cgMap);

        formGraph();

        MavenUtil.i().getLog().info("call graph transformer end..");
    }

    protected abstract void initMethodBranch();

    protected abstract void formGraph();

    public IGraph getGraph() {
        return graph;
    }

    protected boolean isHostClass(String clsName) {
        return entryClses.contains(clsName);
    }
}
